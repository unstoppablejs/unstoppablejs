import { Struct, Tuple, bool, str, Vector, uint8, uint, int } from "../index.ts"
import { testCodec } from "./test-utils.ts"

describe("Tuple", () => {
  it("static", () => {
    const tester = testCodec(Tuple(uint8, bool, Tuple(bool, uint8)))
    const three =
      "0000000000000000000000000000000000000000000000000000000000000003"
    const falsy =
      "0000000000000000000000000000000000000000000000000000000000000000"
    tester([3n, false, [false, 3n]], `0x${three}${falsy}${falsy}${three}`)
  })

  it("dynamic", () => {
    const tester = testCodec(Tuple(str, bool, Vector(uint8)))
    const location1 =
      "0000000000000000000000000000000000000000000000000000000000000060"
    const boolTrue =
      "0000000000000000000000000000000000000000000000000000000000000001"
    const location2 =
      "00000000000000000000000000000000000000000000000000000000000000a0"
    const strlen =
      "0000000000000000000000000000000000000000000000000000000000000004"
    const strdata =
      "6461766500000000000000000000000000000000000000000000000000000000"
    const arrlen =
      "0000000000000000000000000000000000000000000000000000000000000003"
    const arr1 =
      "0000000000000000000000000000000000000000000000000000000000000001"
    const arr2 =
      "0000000000000000000000000000000000000000000000000000000000000002"
    const arr3 =
      "0000000000000000000000000000000000000000000000000000000000000003"

    tester(
      ["dave", true, [1n, 2n, 3n]],
      `0x${location1}${boolTrue}${location2}${strlen}${strdata}${arrlen}${arr1}${arr2}${arr3}`,
    )
  })

  it("dynamic2", () => {
    const tester = testCodec(
      Tuple(
        Struct({
          foo: uint,
          baz: Vector(int),
          bar: int,
          text: str,
        }),
      ),
    )

    tester(
      [{ foo: 5n, baz: [5n], bar: -5n, text: "hello" }],
      `0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000080fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000`,
    )
  })
})
